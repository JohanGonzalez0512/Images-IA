{"version":3,"sources":["components/InputFile.js","components/TableResults.js","helpers/analyzeImage.js","ImageDetectorApp.js","hooks/usePrediction.js","index.js"],"names":["InputFile","setDataImage","useState","inputValue","setInputValue","className","type","onChange","image","target","files","readear","FileReader","onload","result","readAsDataURL","id","name","TableResults","info","map","label","confidence","toFixed","key","analyzeImage","img","a","ml5","model","classify","document","getElementById","results","ImageDetectorApp","dataImage","data","loading","prediction","setPrediction","useEffect","then","res","usePrediction","src","alt","style","maxWidth","length","class","role","ReactDOM","render"],"mappings":"qNA8BeA,EA5BG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAapC,OACI,oCACI,yBAAKC,UAAU,oBAEX,yBAAKA,UAAU,eACX,2BAAOC,KAAK,OAAOD,UAAU,oBAAoBE,SAdxC,SAAC,GAAgB,IAChCC,EAD+B,EAAbC,OACFC,MAAM,GAC5BN,EAAcI,GACd,IAAIG,EAAU,IAAIC,WAClBD,EAAQE,OAAU,YAAiB,IAAdJ,EAAa,EAAbA,OACjBR,EAAaQ,EAAOK,SAExBH,EAAQI,cAAcP,MAQV,2BAAOH,UAAU,oBAAoBW,GAAG,eAAeb,EAAWc,UCMvEC,EAzBM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAIhB,OACI,oCACI,wBAAId,UAAU,+BAENc,EAAKC,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAEf,OADAA,GAAyB,IAAXA,GAAgBC,QAAQ,GAC5B,wBACOlB,UAAY,kCACZmB,IAAKH,GAEV,2BAAG,2BAAIA,GAAP,KAAoBC,EAApB,Y,+BCb3BG,EAAY,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEAEJC,kBAAoB,aAFhB,cAElBC,EAFkB,gBAGFA,EAAMC,SAASC,SAASC,eAAe,QAHrC,cAGlBC,EAHkB,yBAKjBA,GALiB,2CAAH,sDCgDVC,EA7CU,WAAO,IAAD,EAEOhC,mBAAS,MAFhB,mBAEpBiC,EAFoB,KAETlC,EAFS,OCHF,SAACyB,GAAS,IAAD,EAEExB,mBAAS,CAAEkC,KAAM,GAAIC,SAAS,IAFhC,mBAE3BC,EAF2B,KAEfC,EAFe,KAelC,OAZAC,qBAAU,WACFd,IACAa,EAAc,CAAEH,KAAM,GAAIC,SAAS,IACnCZ,IAAegB,MAAK,SAAAC,GAChBH,EAAc,CACVF,SAAS,EACTD,KAAMM,UAInB,CAAChB,IAEGY,EDTmBK,CAAcR,GAAhCC,EAHmB,EAGnBA,KAAMC,EAHa,EAGbA,QAId,OACI,yBAAKhC,UAAU,OAEX,oDACA,yBAAKA,UAAU,YACX,yBAAKA,UAAU,SAEX,yBAAKA,UAAU,WAAWW,GAAG,MAAM4B,IAAOT,GAAa,+BAA4CU,IAAI,SAASC,MAAO,CAAEC,SAAU,QAIvI,yBAAK1C,UAAU,SACX,kBAAC,EAAD,CAAWJ,aAAcA,IAIJ,IAAhBmC,EAAKY,SAAiBX,GAAY,yBAAKhC,UAAU,uBAAf,qCAGlCgC,EACK,yBAAKY,MAAM,eACT,yBAAKA,MAAM,kCAAkCC,KAAK,UAC9C,0BAAMD,MAAM,WAAZ,gBAGN,kBAAC,EAAD,CAAc9B,KAAMiB,QEhClDe,IAASC,OAEL,kBAAC,EAAD,MAEFrB,SAASC,eAAe,W","file":"static/js/main.28cbb2b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst InputFile = ({ setDataImage }) => {\n\n    const [inputValue, setInputValue] = useState({});\n\n    const handleFileChange = ({ target }) => {\n        const image = (target.files[0])\n        setInputValue(image)\n        let readear = new FileReader()\n        readear.onload = (({ target }) => {\n            setDataImage(target.result)\n        })\n        readear.readAsDataURL(image)\n    }\n    return (\n        <>\n            <div className=\"input-group mb-3\">\n\n                <div className=\"custom-file\">\n                    <input type=\"file\" className=\"custom-file-input\" onChange={handleFileChange} />\n                    <label className=\"custom-file-label\" id=\"label-input\">{inputValue.name}</label>\n                </div>\n            </div>\n\n\n        </>\n    );\n}\n\nexport default InputFile;\n","import React from 'react';\n\nconst TableResults = ({ info }) => {\n\n    \n    \n        return(\n            <>\n                <ul className=\"list-group list-group-flush\">\n                    {\n                        info.map(({ label, confidence }) => {\n                            confidence = (confidence*100).toFixed(2)\n                            return  ( < li\n                                             className = \"list-group-item text-capitalize\" \n                                             key={label}\n                                        >\n                                        <p><b>{label}</b>: {confidence}%</p></li\n                                    >)\n                        })\n                }\n\n            </ul>\n\n        </>\n    );\n}\n\nexport default TableResults;\n","\nimport * as ml5 from 'ml5'\n\nexport const analyzeImage = async(img) => {\n   \n    const model = await ml5.imageClassifier('MobileNet');\n    const results = await model.classify(document.getElementById(\"img\"))\n\n    return results;\n}","import React, { useEffect, useState } from 'react';\nimport InputFile from './components/InputFile';\nimport TableResults from './components/TableResults';\nimport { analyzeImage } from './helpers/analyzeImage';\nimport { usePrediction } from './hooks/usePrediction';\n\nconst ImageDetectorApp = () => {\n\n    const [dataImage, setDataImage] = useState(null);\n    const { data, loading } = usePrediction(dataImage)\n\n\n\n    return (\n        <div className=\"m-5\">\n\n            <h1>Image classification</h1>\n            <div className=\"row mt-3\">\n                <div className=\"col-5\">\n\n                    <img className=\"rounded \" id=\"img\" src={(!dataImage) ? \"./assets/images/img-icon.png\" : dataImage} alt=\"Imagen\" style={{ maxWidth: 450 }} />\n\n                </div>\n\n                <div className=\"col-5\">\n                    <InputFile setDataImage={setDataImage} />\n                    {/* <button className=\"btn btn-primary\">analyzeImage</button> */}\n\n                    {\n                        (data.length === 0 && !loading) && <div className=\"alert alert-primary\"> Seleccione una imagen, por favor</div>\n                    }\n                    {\n                        (loading)\n                            ? <div class=\"text-center\">\n                                <div class=\"spinner-border m-5 text-primary\" role=\"status\">\n                                    <span class=\"sr-only\">Loading...</span>\n                                </div>\n                            </div>\n                            : <TableResults info={data} />\n\n\n                    }\n                </div>\n\n\n\n            </div>\n        </div>\n    );\n}\n\nexport default ImageDetectorApp;\n","import { useEffect, useState } from 'react';\nimport { analyzeImage } from '../helpers/analyzeImage';\n\nexport const usePrediction = (img) => {\n   \n    const [prediction, setPrediction] = useState({ data: [], loading: false });\n    useEffect(() => {\n        if (img) {\n            setPrediction({ data: [], loading: true })\n            analyzeImage().then(res => {\n                setPrediction({\n                    loading: false,\n                    data: res\n                })\n            })\n        }\n    }, [img]);\n\n    return prediction\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ImageDetectorApp from './ImageDetectorApp';\n\n\nReactDOM.render(\n  \n    <ImageDetectorApp />,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}